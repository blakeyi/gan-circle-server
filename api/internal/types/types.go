// Code generated by goctl. DO NOT EDIT.
package types

import (
	"strings"
)

// 响应结构体定义
type Response struct {
	RetCode    int         `json:"ret_code"`
	RetMsg     string      `json:"ret_msg"`
	RetContent interface{} `json:"ret_content"`
}

type Errno struct {
	Code    int
	Message string
}

// 错误码定义,后续在此添加
var (
	Succeed  = &Errno{Code: 0, Message: "success"}
	ErrParam = &Errno{Code: 10001, Message: "param error"}
)

func (r *Response) SetErrorCode(e *Errno, errs ...error) {
	r.RetCode = e.Code
	r.RetMsg = e.Message
	if len(errs) > 0 {
		var errMsg string
		for _, err := range errs {
			errMsg += err.Error() + ","
		}
		errMsg = strings.Trim(errMsg, ",")
		r.RetContent = errMsg
	}
}

type UserInfo struct {
	Uid           int64  `json:"uid"`
	Openid        string `json:"openid"`
	Phone         string `json:"phone"`
	Name          string `json:"name"`
	Gender        bool   `json:"gender"`
	Age           int8   `json:"age"`
	Height        int8   `json:"height"`
	Weight        int8   `json:"weight"`
	Birth         string `json:"birth"`
	Constellation string `json:"constellation"` // 星座
	Profession    string `json:"profession"`
	Company       bool   `json:"company"`
	Education     int8   `json:"education"`
	University    int8   `json:"university"`
	HomeProvince  string `json:"homeProvince"`
	HomeCity      string `json:"homeCity"`
	NowProvince   string `json:"nowProvince"`
	NowCity       string `json:"nowCity"`
	Cover         string `json:"cover"`
}

type UserQueryReq struct {
	Uid int64 `json:"uid"`
}

type UserDeleteReq struct {
	Uid int64 `json:"uid"`
}

type LoginReq struct {
	Mode   int64  `json:"mode"`
	Openid string `json:"openid"`
	Phone  string `json:"phone"`
}

type LoginRes struct {
	Uid          int64  `json:"uid"`
	AccessToken  string `json:"token"`
	AccessExpire int64  `json:"accessExpire"`
	RefreshAfter int64  `json:"refreshAfter"`
}
